name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, '[0-9]+-[0-9]+-*']
  workflow_run:
    workflows: ['Dependabot']
    branches-ignore: ['workflows/tests/*']
    types:
      - completed
  workflow_dispatch:
  workflow_call:

jobs:
  test:
    name: Test (${{ matrix.config.name }})
    if: ${{ !startsWith(github.head_ref, 'workflows/tests/') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        config:
          - name: Synchronized
            id: synchronized
          - name: Auto-merge
            id: auto-merge
    permissions: write-all
    env:
      SHA: ${{ github.sha }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number || github.event.workflow_run.pull_requests[0].number }}
      PULL_REQUEST_HEAD_REF: |-
        ${{
          (github.event.pull_request.head.repo.full_name == github.repository || github.event.pull_request.head.repo.full_name == null)
            && (github.event.pull_request.head.ref || github.event.workflow_run.head_branch)
            || (github.event.pull_request.head.sha || github.event.workflow_run.head_sha)
        }}
      PUSH_HEAD_REF: ${{ github.ref }}
      EVENT_REF_TEXT: |-
        ${{
          (github.event_name != 'workflow_run' && github.event_name != 'pull_request')
            && format('{0} ({1})', github.ref, github.sha)
            || format('#{0} ({1})', (github.event.pull_request.number || github.event.workflow_run.pull_requests[0].number), github.sha)
        }}
      RUN_ID: ${{ github.run_id }}
      RUN_NUMBER: ${{ github.run_number }}
      RUN_ATTEMPT: ${{ github.run_attempt }}
      TEST_BASE_BRANCH_NAME: ${{ format('workflows/tests/{0}/base/id-{1}/run-{2}/attempt-{3}/sha-{4}', matrix.config.id, github.run_id, github.run_number, github.run_attempt, github.sha) }}
      TEST_HEAD_BRANCH_NAME: ${{ format('workflows/tests/{0}/head/id-{1}/run-{2}/attempt-{3}/sha-{4}', matrix.config.id, github.run_id, github.run_number, github.run_attempt, github.sha) }}
      CONFIG_TYPE: ${{ matrix.config.name }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ github.event_name != 'workflow_run' }}
        with:
          fetch-depth: 0

      - uses: actions/checkout@v4
        if: ${{ github.event_name == 'workflow_run' }}
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - uses: CatChen/config-git-with-token-action@v2
        with:
          github-token: ${{ secrets.CREATE_PULL_REQUEST_ACTION_TOKEN }}

      - name: Git checkout PR head commit
        if: ${{ github.event_name == 'workflow_run' || github.event_name == 'pull_request' }}
        run: |
          echo "::notice::PR head ref is $PULL_REQUEST_HEAD_REF"
          git checkout $PULL_REQUEST_HEAD_REF

      - name: Git checkout push head commit
        if: ${{ github.event_name != 'workflow_run' && github.event_name != 'pull_request' }}
        run: |
          echo "::notice::Push head ref is $PUSH_HEAD_REF"
          git checkout $PUSH_HEAD_REF

      - name: Git checkout test base branch
        run: |
          echo "::notice::Test base branch is $TEST_BASE_BRANCH_NAME"
          git checkout -b "$TEST_BASE_BRANCH_NAME"

      - name: Make test base commit
        run: |
          git commit --allow-empty -m "$CONFIG_TYPE test base commit for $EVENT_REF_TEXT by $RUN_NUMBER-$RUN_ATTEMPT"
          echo "::notice::Test base commit is `git rev-parse --verify HEAD`"

      - name: Git push test base branch
        run: |
          git push -f --set-upstream origin "$TEST_BASE_BRANCH_NAME"
          echo "::notice::Remote test branch is origin/$TEST_BASE_BRANCH_NAME"

      - name: Open base PR
        id: open-base-pr
        env:
          GH_TOKEN: ${{ secrets.CREATE_PULL_REQUEST_ACTION_TOKEN }}
        run: |
          echo "::notice::Run number is $RUN_NUMBER"
          echo "::notice::Run attempt is $RUN_ATTEMPT"
          if [[ -z "$PULL_REQUEST_NUMBER" ]]
          then
            echo "::notice::Base ref is $PUSH_HEAD_REF"
            exit 1
          else
            echo "::notice::Base PR number is $PULL_REQUEST_NUMBER"
          fi
          gh pr create --base "main" --title "$CONFIG_TYPE test base PR for $EVENT_REF_TEXT" --body "Generated from $EVENT_REF_TEXT.

          Run ID: [$RUN_ID]($(gh run view $RUN_ID --json 'url' --jq '.url')). Number: $RUN_NUMBER. Attempt: $RUN_ATTEMPT."
          TEST_BASE_PR_NUMBER=`gh pr view | grep 'number:' | cut -f 2`
          echo "test-base-pr-number=$TEST_BASE_PR_NUMBER" >> $GITHUB_OUTPUT
          echo "::notice::Test base PR number is $TEST_BASE_PR_NUMBER"

      - name: Git checkout test head branch
        run: |
          echo "::notice::Test head branch is $TEST_HEAD_BRANCH_NAME"
          git checkout -b "$TEST_HEAD_BRANCH_NAME"

      - name: Make test head commit
        run: |
          git commit --allow-empty -m "$CONFIG_TYPE test head commit for $EVENT_REF_TEXT by $RUN_NUMBER-$RUN_ATTEMPT"
          echo "::notice::Test head commit is `git rev-parse --verify HEAD`"

      - name: Git push test head branch
        run: |
          git push -f --set-upstream origin "$TEST_HEAD_BRANCH_NAME"
          echo "::notice::Remote test branch is origin/$TEST_HEAD_BRANCH_NAME"

      - name: Open head PR
        id: open-head-pr
        env:
          GH_TOKEN: ${{ secrets.CREATE_PULL_REQUEST_ACTION_TOKEN }}
          TEST_BASE_PR_NUMBER: ${{ steps.open-base-pr.outputs.test-base-pr-number }}
        run: |
          echo "::notice::Test base PR number is $TEST_BASE_PR_NUMBER"
          gh pr create --base "$TEST_BASE_BRANCH_NAME" --title "$CONFIG_TYPE test head PR for $EVENT_REF_TEXT" --body "Generated from $EVENT_REF_TEXT.

          Run ID: [$RUN_ID]($(gh run view $RUN_ID --json 'url' --jq '.url')). Number: $RUN_NUMBER. Attempt: $RUN_ATTEMPT.

          #accept2ship"
          TEST_HEAD_PR_NUMBER=`gh pr view | grep 'number:' | cut -f 2`
          echo "test-head-pr-number=$TEST_HEAD_PR_NUMBER" >> $GITHUB_OUTPUT
          echo "::notice::Test head PR number is $TEST_HEAD_PR_NUMBER"

      - name: Approve PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr review --approve

      - name: Check PR
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_HEAD_PR_NUMBER: ${{ steps.open-head-pr.outputs.test-head-pr-number }}
        run: |
          CHECKS_TEMP_FILE="$(mktemp)"
          echo "checks-temp-file=$CHECKS_TEMP_FILE" >> $GITHUB_OUTPUT;

          sleep 10
          CHECKS=$(gh pr checks $TEST_HEAD_PR_NUMBER | tee -a $CHECKS_TEMP_FILE)
          PENDING=$(echo "$CHECKS" | cut -f2 | grep pending | wc -l)

          while [[ $PENDING -gt 0 && -n "$PENDING" ]]
          do
            echo "::group::Pending checks: $PENDING"
            gh pr checks $TEST_HEAD_PR_NUMBER --watch --fail-fast | tee -a $CHECKS_TEMP_FILE

            sleep 10
            CHECKS=$(gh pr checks $TEST_HEAD_PR_NUMBER | tee -a $CHECKS_TEMP_FILE)
            PENDING=$(echo "$CHECKS" | cut -f2 | grep pending | wc -l)

            echo "::endgroup::"
          done

          if [[ -s $CHECKS_TEMP_FILE ]]
          then
            echo "::group::Temp file content"
            cat $CHECKS_TEMP_FILE
            echo "::endgroup::"
          else
            echo "checks-temp-file=" >> $GITHUB_OUTPUT;
          fi

          gh pr checks $TEST_HEAD_PR_NUMBER # Let check outcome determine the step exit code

      - name: Report Checks
        if: ${{ always() && steps.check-pr.outputs.checks-temp-file != '' && (github.event_name == 'pull_request' || github.event_name == 'workflow_run')}}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_HEAD_PR_NUMBER: ${{ steps.open-head-pr.outputs.test-head-pr-number }}
          CHECKS_TEMP_FILE: ${{ steps.check-pr.outputs.checks-temp-file }}
        run: |
          gh pr comment $PULL_REQUEST_NUMBER --body "**Checks from $CONFIG_TYPE test PR #$TEST_HEAD_PR_NUMBER**

          | Check | Status | Time |
          | --- | --- | --: |
          $(cat $CHECKS_TEMP_FILE |
            grep -E 'https://' |
            tac |
            awk 'BEGIN { FS ="\t" } ; { if (! seen[$1]++) print }' |
            sed -E 's/(.*)\t(pass)\t(.*)\t(.*)\t(.*)/| [**\1**](\4) | ‚úÖ | \3 |/;
              s/(.*)\t(fail)\t(.*)\t(.*)\t(.*)/| [*\1*](\4) | ‚õî | \3 |/;
              s/(.*)\t(skipping)\t(.*)\t(.*)\t(.*)/| [~\1~](\4) | ‚è≠Ô∏è | |/;
              s/(.*)\t(pending)\t(.*)\t(.*)\t(.*)/| [\1](\4) | üîÑ | |/;
              s/(.*)\t(.*)\t(.*)\t(.*)\t(.*)/| [\1](\4) | \2 | \3 |/')"
          rm -f $CHECKS_TEMP_FILE

      - name: Verify PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_HEAD_PR_NUMBER: ${{ steps.open-head-pr.outputs.test-head-pr-number }}
        run: |
          TEST_PR_STATE=`gh pr view $TEST_HEAD_PR_NUMBER --json 'state' -q '.state'`
          echo "::notice::Test PR state is $TEST_PR_STATE"
          if [ "$TEST_PR_STATE" != 'MERGED' ]
          then
            exit 1
          fi

      - name: Close head PR
        if: ${{ failure() || cancelled() }}
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_HEAD_PR_NUMBER: ${{ steps.open-head-pr.outputs.test-head-pr-number }}
        run: |
          TEST_PR_STATE=`gh pr view $TEST_HEAD_PR_NUMBER --json 'state' -q '.state'`
          if [ "$TEST_PR_STATE" = 'MERGED' ]
          then
            exit
          fi
          gh pr close $TEST_HEAD_PR_NUMBER -d -c "Finished testing $SHA by $RUN_NUMBER-$RUN_ATTEMPT. Closing PR."

      - name: Delete remote test head branch
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if test $(git ls-remote origin --heads "$TEST_HEAD_BRANCH_NAME" | wc -l ) != 0
          then
            git push -d origin "$TEST_HEAD_BRANCH_NAME"
          fi

      - name: Close base PR
        if: ${{ always() }}
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_BASE_PR_NUMBER: ${{ steps.open-base-pr.outputs.test-base-pr-number }}
        run: |
          gh pr close $TEST_BASE_PR_NUMBER -d -c "Finished testing $SHA by $RUN_NUMBER-$RUN_ATTEMPT. Closing PR."

      - name: Delete remote test base branch
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if test $(git ls-remote origin --heads "$TEST_BASE_BRANCH_NAME" | wc -l ) != 0
          then
            git push -d origin "$TEST_BASE_BRANCH_NAME"
          fi
